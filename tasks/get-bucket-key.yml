---
- name: Assert that at least one bucket key was found
  assert:
    that: bucket_keys | length > 0
    quiet: yes
    fail_msg: No bucket keys were found

- name: Get bucket key from date
  set_fact:
    bucket_key: '{{ bucket_keys | select("equalto", s3.date) | list | last | d ("none") }}'
  when: s3.date | lower != "latest"

- name: Assert that date bucket key was found
  assert:
    that: bucket_key != "none"
    quiet: yes
    fail_msg: No matching date key was found
  when: s3.date | lower != "latest"

- name: Get latest bucket_key
  set_fact:
    '{{ bucket_type }}_bucket_key': '{{ bucket_keys[-1] }}'
  when: s3.date | lower == "latest"

- name: Get bucket key json file
  shell: <
    aws s3 cp {{ s3.bucket }}/{{ s3.key_prefix | d () | regex_replace(get_trailing_slash, '') }}{{ key_prefix_ternary }}/{{ bucket_key }}/{{ report_prefix }}.json
    {{ download_location }}/{{ bucket_type }}.json
  vars:
    get_trailing_slash: \/$
    key_prefix_ternary: '{{ s3.key_prefix is defined | ternary ("/", "") }}'
    bucket_key: '{{ lookup ("vars", bucket_type + "_bucket_key") }}'
    report_prefix: '{{ s3_custom_report_prefix }}'
    download_location: '{{ s3_custom_report_download_location }}'

- name: Load s3 inventory report json into ansible
  set_fact:
    '{{ bucket_type }}_inventory_json': '{{ lookup ("file", download) | from_json }}'
  vars:
    download: '{{ download_location }}/{{ bucket_type }}.json'